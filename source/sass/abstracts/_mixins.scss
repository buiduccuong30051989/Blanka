//
// Abstracts :: Mixins
// --------------------------------------------------

// Placeholder
@mixin placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

// Truncate Text
@mixin truncate($width) {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $width;
}

// Gradient
@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(
    legacy-direction($direction),
    $color-stops
  );
  background: linear-gradient($direction, $color-stops);
}

// Fit image cover
@mixin fitImage {
  object-fit: cover;
  object-position: center center;
  width: 100%;
  height: 100%;
}

// Set Css Variables
@function ends-with($color) {
  $hue: #{hue($color)};
  @return str-slice($hue, 1, $end-at: -4);
}

:root {
  @each $color, $value in $colors-theme {
    --hue-#{$color}: #{ends-with($value)};
    --saturation-#{$color}: #{saturation($value)};
    --lightness-#{$color}: #{lightness($value)};
    --lightness-darker-#{$color}: #{lightness($value) - 5%};
    // --lightness-lighten-#{$color}: #{lightness($value) + 5%};
  }
}

:root {
  @each $color, $value in $colors-theme-02 {
    --#{$color}: #{$value};
  }
}

// Aspect raito
@mixin aspect-ratio($width, $height, $class) {
  position: relative;
  &:before {
    display: block;
    content: '';
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > #{$class} {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
